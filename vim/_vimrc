source $VIMRUNTIME/vimrc_example.vim

"Set mapleader
let mapleader = ","
let g:mapleader = ","

"设置颜色方案
colorscheme desert

"Highlight Syntax
if has("syntax")  
  syntax on  
endif

" Uncomment the following to have Vim jump to the last position when  
" reopening a file  
if has("autocmd")  
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins  
" according to the detected filetype.  
"开启了Vim的三种智能: 
"1. 自动识别文件类型
"2. 用文件类型plugin脚本
"3. 使用缩进定义文件 编辑程序的时候, 语句的缩进可以让它自动完成
filetype plugin indent on  
"开启文件类型侦测
filetype on
"根据侦测到的不同类型加载对应的插件
filetype plugin on
"根据侦测到的不同类型采用不同的缩进格式
filetype indent on
"取消补全内容以分割子窗口形式出现，只显示补全列表
set completeopt=longest,menu
"启用new-omni-completion
set ofu=syntaxcomplete#Complete

"自动补全命令时候使用菜单式匹配列表  
set wildmenu
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType java set omnifunc=javacomplete#Complet

"Pydiction
let g:pydiction_location = 'D:\Program Files (x86)\Vim\vimfiles\ftplugin\pydiction\complete-dict'

" The following are commented out as they cause vim to behave a lot  
" differently from regular Vi. They are highly recommended though.  
set nocompatible
"set showcmd		" Show (partial) command in status line.  
set showmatch		" Show matching brackets.  
set ignorecase		" Do case insensitive matching  
"set smartcase		" Do smart case matching  
set incsearch		" Incremental search  
set autowrite		" Automatically save before commands like :next and :make  
"set hidden             " Hide buffers when they are abandoned  
set mouse=a			" Enable mouse usage (all modes)  

" 允许退格键删除和tab操作  
set smartindent  
set smarttab  
set expandtab  
set backspace=2
set textwidth=79

" 不讨论制表符为8 还是为4 较好，这里设置（软）制表符宽度为4
set tabstop=4
set softtabstop=4

" 设置缩进的空格数为4
set shiftwidth=4

" 设置自动缩进：即每行的缩进值与上一行相等；使用 noautoindent 取消设置 
set autoindent

" 设置C/C++语言的具体缩进方式
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s

" 左侧显示文本的行号  
set nu

"设置文件格式
"unix            <LF>
"dos             <CR><LF>
"mac             <CR>
set fileformats=dos

"设置中文编码
"终端编码,终端处理文本或表示文本时所使用的编码.
let &termencoding=&encoding 
"Vim 的内部编码,Vim在处理文本或表示文本时所使用的编码.
set encoding=gbk
"文件编码,就是文件的数据在磁盘中存储所使用的编码.
set fileencoding=utf-8
"宽度“不明”的字符宽度置为双倍字符宽度（中文字符宽度）
set ambiwidth=double 
"Vim 打开文件时的尝试使用的编码.
"set fileencodings=utf-8,cp936,big5,euc-jp,euc-kr,latin1,ucs-bom  
set fileencodings=ucs-bom,utf-8,gbk 

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" 括号自动补全  
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap ' ''<ESC>i
:inoremap " ""<ESC>i
function ClosePair(char)  
  if getline('.')[col('.') - 1] == a:char   
    return ")"  
  else  
    return a:char  
  endif  
endfunction

"按两下，即可返回普通模式<ESC>
inoremap <leader><leader>  

"绑定保存快捷键
nnoremap  :w<CR>

"折叠方法，用标计marker来标识代码的折叠，系统默认是{{{和}}}
set foldmethod=marker

"Windows下的复制粘贴
map <C-c> "+y
map <C-v> "+p

"TagList
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1

"tags
"第一个命令里的分号是必不可少的。这个命令让vim首先在当前目录里寻找tags文件，
"如果没有找到tags文件，或者没有找到对应的目标，就到父目录 中查找，一直向上
"递归。因为tags文件中记录的路径总是相对于tags文件所在的路径，所以要使用第二
"个设置项来改变vim的当前目录。 
set tags=tags;
set autochdir

"WinManager
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<cr>

"cscope show in quickfix
set cscopequickfix=s-,c-,d-,i-,t-,e-

"MiniBufExplorer
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1

"Grep
nnoremap <silent> <F3> :Grep<CR>

